/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Registry, RegistryInterface } from "../Registry";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "changed",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "ContractStatusChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "changed",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "CurrencyStatusChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "newScale",
        type: "uint256",
      },
    ],
    name: "FeeVariablesChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "SystemWalletUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "approveAllCurrencies",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_salePrice",
        type: "uint256",
      },
    ],
    name: "feeInfo",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
    ],
    name: "isApprovedCurrency",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "toCheck",
        type: "address",
      },
    ],
    name: "isPlatformContract",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "toChange",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setContractStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenContract",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setCurrencyStatus",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newScale",
        type: "uint256",
      },
    ],
    name: "setFeeVariables",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newWallet",
        type: "address",
      },
    ],
    name: "setSystemWallet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405261012c60045561271060055534801561001c57600080fd5b5061002633610074565b73aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa60005260026020527fe1e81504ed8609a5b03379f97b221e3dede4a62d6d61a87a4ab7ed7b1b9c0553805460ff191660011790556100c4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b97806100d36000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b11610081578063ec1406ea1161005b578063ec1406ea146101a7578063f2fde38b146101ba578063fd0176d2146101cd57600080fd5b80638da5cb5b14610119578063e055799d14610139578063e44f5c501461017557600080fd5b8063715018a6116100b2578063715018a6146100f6578063753d5bd6146100fe57806381c81cdc1461010657600080fd5b806311f3c135146100ce5780636f2a9091146100e3575b600080fd5b6100e16100dc366004610970565b6101e0565b005b6100e16100f13660046109ae565b61027a565b6100e1610432565b6100e1610498565b6100e16101143660046109ae565b610582565b6000546040516001600160a01b0390911681526020015b60405180910390f35b6101656101473660046109ea565b6001600160a01b031660009081526001602052604090205460ff1690565b6040519015158152602001610130565b610188610183366004610a0c565b6106e7565b604080516001600160a01b039093168352602083019190915201610130565b6100e16101b53660046109ea565b610724565b6100e16101c83660046109ea565b6107f1565b6101656101db3660046109ea565b6108d3565b6000546001600160a01b0316331461023f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60048290556005819055604051819083907f659bcd138511d409d0e26184817d9ea294f89b73c97057deb92ee81d91cfdb4490600090a35050565b6000546001600160a01b031633146102d45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610236565b60035460ff16156103275760405162461bcd60e51b815260206004820152601760248201527f616c6c2063757272656e6369657320617070726f7665640000000000000000006044820152606401610236565b6000600182151514610356576040518060400160405280600581526020016466616c736560d81b815250610374565b604051806040016040528060048152602001637472756560e01b8152505b6001600160a01b03841660009081526002602090815260409182902054915192935060ff90911615158415151415916103af91849101610a55565b604051602081830303815290604052906103dc5760405162461bcd60e51b81526004016102369190610a9a565b506001600160a01b038316600081815260026020526040808220805460ff191686151590811790915590519092917f6e58e43a98d8e1aecb41fbdcad228de200d69e36c3f5b48c9b7cf758e6d7083291a3505050565b6000546001600160a01b0316331461048c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610236565b6104966000610908565b565b6000546001600160a01b031633146104f25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610236565b60035460ff16156105455760405162461bcd60e51b815260206004820152601060248201527f616c726561647920617070726f766564000000000000000000000000000000006044820152606401610236565b6003805460ff191660019081179091556040516000907f6e58e43a98d8e1aecb41fbdcad228de200d69e36c3f5b48c9b7cf758e6d70832908290a3565b6000546001600160a01b031633146105dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610236565b600060018215151461060b576040518060400160405280600581526020016466616c736560d81b815250610629565b604051806040016040528060048152602001637472756560e01b8152505b6001600160a01b03841660009081526001602090815260409182902054915192935060ff909116151584151514159161066491849101610acd565b604051602081830303815290604052906106915760405162461bcd60e51b81526004016102369190610a9a565b506001600160a01b038316600081815260016020526040808220805460ff191686151590811790915590519092917fd1cd265923267e7363c8fd778538639a7688684e9bb228979fd0177f0cbb23ad91a3505050565b600080600360019054906101000a90046001600160a01b0316600554600454856107119190610b12565b61071b9190610b3f565b91509150915091565b6000546001600160a01b0316331461077e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610236565b600380547fffffffffffffffffffffff0000000000000000000000000000000000000000ff166101006001600160a01b038416908102919091179091556040519081527fbfec2b9c4a0a024ab97d025ceb52ac9d40b7405bc450983de2a6c65ba7a34a029060200160405180910390a150565b6000546001600160a01b0316331461084b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610236565b6001600160a01b0381166108c75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610236565b6108d081610908565b50565b60035460009060ff16156108e957506001919050565b506001600160a01b031660009081526002602052604090205460ff1690565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806040838503121561098357600080fd5b50508035926020909101359150565b80356001600160a01b03811681146109a957600080fd5b919050565b600080604083850312156109c157600080fd5b6109ca83610992565b9150602083013580151581146109df57600080fd5b809150509250929050565b6000602082840312156109fc57600080fd5b610a0582610992565b9392505050565b600060208284031215610a1e57600080fd5b5035919050565b60005b83811015610a40578181015183820152602001610a28565b83811115610a4f576000848401525b50505050565b7f746f6b656e2073746174757320697320616c7265616479200000000000000000815260008251610a8d816018850160208701610a25565b9190910160180192915050565b6020815260008251806020840152610ab9816040850160208701610a25565b601f01601f19169190910160400192915050565b7f636f6e74726163742073746174757320697320616c7265616479200000000000815260008251610b0581601b850160208701610a25565b91909101601b0192915050565b6000816000190483118215151615610b3a57634e487b7160e01b600052601160045260246000fd5b500290565b600082610b5c57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c7b4d3c84b7f886d6b372ba41878345384ca0a2acaf7d570a5910e20d507dd2f64736f6c63430008090033";

type RegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Registry__factory extends ContractFactory {
  constructor(...args: RegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Registry";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Registry> {
    return super.deploy(overrides || {}) as Promise<Registry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Registry {
    return super.attach(address) as Registry;
  }
  connect(signer: Signer): Registry__factory {
    return super.connect(signer) as Registry__factory;
  }
  static readonly contractName: "Registry";
  public readonly contractName: "Registry";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryInterface {
    return new utils.Interface(_abi) as RegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Registry {
    return new Contract(address, _abi, signerOrProvider) as Registry;
  }
}
