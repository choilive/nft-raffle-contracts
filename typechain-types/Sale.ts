/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace ISale {
  export type SaleStruct = {
    id: BigNumberish;
    owner: string;
    nftContract: string;
    nftId: BigNumberish;
    amount: BigNumberish;
    purchased: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    price: BigNumberish;
    maxBuyAmount: BigNumberish;
    currency: string;
  };

  export type SaleStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    id: BigNumber;
    owner: string;
    nftContract: string;
    nftId: BigNumber;
    amount: BigNumber;
    purchased: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    price: BigNumber;
    maxBuyAmount: BigNumber;
    currency: string;
  };
}

export interface SaleInterface extends utils.Interface {
  contractName: "Sale";
  functions: {
    "buy(uint256,address,uint256,uint256)": FunctionFragment;
    "cancelSale(uint256)": FunctionFragment;
    "claimFunds(address)": FunctionFragment;
    "claimNfts(uint256)": FunctionFragment;
    "createSale(address,uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "getClaimableBalance(address,address)": FunctionFragment;
    "getSaleDetails(uint256)": FunctionFragment;
    "getSaleStatus(uint256)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimFunds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimNfts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSale",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSaleStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimNfts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BalanceUpdated(address,address,uint256)": EventFragment;
    "NFTsReclaimed(uint256,address,uint256)": EventFragment;
    "NewSale(uint256,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Purchase(uint256,address,address,uint256)": EventFragment;
    "SaleCancelled(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTsReclaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCancelled"): EventFragment;
}

export type BalanceUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  { accountOf: string; tokenAddress: string; newBalance: BigNumber }
>;

export type BalanceUpdatedEventFilter = TypedEventFilter<BalanceUpdatedEvent>;

export type NFTsReclaimedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { id: BigNumber; owner: string; amount: BigNumber }
>;

export type NFTsReclaimedEventFilter = TypedEventFilter<NFTsReclaimedEvent>;

export type NewSaleEvent = TypedEvent<
  [BigNumber, ISale.SaleStructOutput],
  { id: BigNumber; newSale: ISale.SaleStructOutput }
>;

export type NewSaleEventFilter = TypedEventFilter<NewSaleEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PurchaseEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  {
    saleId: BigNumber;
    purchaser: string;
    recipient: string;
    quantity: BigNumber;
  }
>;

export type PurchaseEventFilter = TypedEventFilter<PurchaseEvent>;

export type SaleCancelledEvent = TypedEvent<[BigNumber], { saleId: BigNumber }>;

export type SaleCancelledEventFilter = TypedEventFilter<SaleCancelledEvent>;

export interface Sale extends BaseContract {
  contractName: "Sale";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      saleId: BigNumberish,
      recipient: string,
      amountToBuy: BigNumberish,
      amountFromBalance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelSale(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFunds(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimNfts(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createSale(
      nftContract: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      price: BigNumberish,
      maxBuyAmount: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getClaimableBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSaleDetails(
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ISale.SaleStructOutput]>;

    getSaleStatus(
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buy(
    saleId: BigNumberish,
    recipient: string,
    amountToBuy: BigNumberish,
    amountFromBalance: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelSale(
    saleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFunds(
    tokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimNfts(
    saleId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createSale(
    nftContract: string,
    id: BigNumberish,
    amount: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    price: BigNumberish,
    maxBuyAmount: BigNumberish,
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getClaimableBalance(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSaleDetails(
    saleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ISale.SaleStructOutput>;

  getSaleStatus(
    saleId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      saleId: BigNumberish,
      recipient: string,
      amountToBuy: BigNumberish,
      amountFromBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelSale(saleId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimFunds(tokenContract: string, overrides?: CallOverrides): Promise<void>;

    claimNfts(saleId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createSale(
      nftContract: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      price: BigNumberish,
      maxBuyAmount: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleDetails(
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ISale.SaleStructOutput>;

    getSaleStatus(
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BalanceUpdated(address,address,uint256)"(
      accountOf?: string | null,
      tokenAddress?: string | null,
      newBalance?: BigNumberish | null
    ): BalanceUpdatedEventFilter;
    BalanceUpdated(
      accountOf?: string | null,
      tokenAddress?: string | null,
      newBalance?: BigNumberish | null
    ): BalanceUpdatedEventFilter;

    "NFTsReclaimed(uint256,address,uint256)"(
      id?: BigNumberish | null,
      owner?: string | null,
      amount?: BigNumberish | null
    ): NFTsReclaimedEventFilter;
    NFTsReclaimed(
      id?: BigNumberish | null,
      owner?: string | null,
      amount?: BigNumberish | null
    ): NFTsReclaimedEventFilter;

    "NewSale(uint256,tuple)"(
      id?: BigNumberish | null,
      newSale?: null
    ): NewSaleEventFilter;
    NewSale(id?: BigNumberish | null, newSale?: null): NewSaleEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Purchase(uint256,address,address,uint256)"(
      saleId?: null,
      purchaser?: null,
      recipient?: null,
      quantity?: null
    ): PurchaseEventFilter;
    Purchase(
      saleId?: null,
      purchaser?: null,
      recipient?: null,
      quantity?: null
    ): PurchaseEventFilter;

    "SaleCancelled(uint256)"(
      saleId?: BigNumberish | null
    ): SaleCancelledEventFilter;
    SaleCancelled(saleId?: BigNumberish | null): SaleCancelledEventFilter;
  };

  estimateGas: {
    buy(
      saleId: BigNumberish,
      recipient: string,
      amountToBuy: BigNumberish,
      amountFromBalance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelSale(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFunds(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimNfts(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createSale(
      nftContract: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      price: BigNumberish,
      maxBuyAmount: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getClaimableBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleDetails(
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSaleStatus(
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      saleId: BigNumberish,
      recipient: string,
      amountToBuy: BigNumberish,
      amountFromBalance: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelSale(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFunds(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimNfts(
      saleId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createSale(
      nftContract: string,
      id: BigNumberish,
      amount: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      price: BigNumberish,
      maxBuyAmount: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleDetails(
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSaleStatus(
      saleId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
