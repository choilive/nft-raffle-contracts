/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IAuction {
  export type AuctionStruct = {
    id: BigNumberish;
    owner: string;
    nftContract: string;
    nftId: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    reservePrice: BigNumberish;
    currency: string;
  };

  export type AuctionStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    id: BigNumber;
    owner: string;
    nftContract: string;
    nftId: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    reservePrice: BigNumber;
    currency: string;
  };

  export type BidStruct = {
    auctionId: BigNumberish;
    bidder: string;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type BidStructOutput = [BigNumber, string, BigNumber, BigNumber] & {
    auctionId: BigNumber;
    bidder: string;
    amount: BigNumber;
    timestamp: BigNumber;
  };
}

export interface AuctionInterface extends utils.Interface {
  contractName: "Auction";
  functions: {
    "bid(uint256,uint256,uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "claimFunds(address)": FunctionFragment;
    "claimNft(uint256,address)": FunctionFragment;
    "createAuction(address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "getAuctionDetails(uint256)": FunctionFragment;
    "getAuctionStatus(uint256)": FunctionFragment;
    "getBidDetails(uint256,address)": FunctionFragment;
    "getClaimableBalance(address,address)": FunctionFragment;
    "getHighestBidder(uint256)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resolveAuction(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bid",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claimFunds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimNft",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidDetails",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestBidder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBidDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AuctionCancelled(uint256)": EventFragment;
    "BalanceUpdated(address,address,uint256)": EventFragment;
    "BidPlaced(uint256,uint256)": EventFragment;
    "ClaimNFT(uint256,address,address,uint256)": EventFragment;
    "NewAuction(uint256,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BalanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AuctionCancelledEvent = TypedEvent<
  [BigNumber],
  { auctionId: BigNumber }
>;

export type AuctionCancelledEventFilter =
  TypedEventFilter<AuctionCancelledEvent>;

export type BalanceUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  { accountOf: string; tokenAddress: string; newBalance: BigNumber }
>;

export type BalanceUpdatedEventFilter = TypedEventFilter<BalanceUpdatedEvent>;

export type BidPlacedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { auctionId: BigNumber; amount: BigNumber }
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export type ClaimNFTEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { auctionId: BigNumber; winner: string; recipient: string; amount: BigNumber }
>;

export type ClaimNFTEventFilter = TypedEventFilter<ClaimNFTEvent>;

export type NewAuctionEvent = TypedEvent<
  [BigNumber, IAuction.AuctionStructOutput],
  { auctionId: BigNumber; newAuction: IAuction.AuctionStructOutput }
>;

export type NewAuctionEventFilter = TypedEventFilter<NewAuctionEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Auction extends BaseContract {
  contractName: "Auction";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bid(
      auctionId: BigNumberish,
      amountFromBalance: BigNumberish,
      externalFunds: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFunds(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimNft(
      auctionId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAuction(
      nftContract: string,
      id: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      reservePrice: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuctionDetails(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IAuction.AuctionStructOutput]>;

    getAuctionStatus(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBidDetails(
      auctionId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<[IAuction.BidStructOutput]>;

    getClaimableBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHighestBidder(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resolveAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bid(
    auctionId: BigNumberish,
    amountFromBalance: BigNumberish,
    externalFunds: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFunds(
    tokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimNft(
    auctionId: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAuction(
    nftContract: string,
    id: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    reservePrice: BigNumberish,
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuctionDetails(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IAuction.AuctionStructOutput>;

  getAuctionStatus(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBidDetails(
    auctionId: BigNumberish,
    bidder: string,
    overrides?: CallOverrides
  ): Promise<IAuction.BidStructOutput>;

  getClaimableBalance(
    account: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getHighestBidder(
    auctionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resolveAuction(
    auctionId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bid(
      auctionId: BigNumberish,
      amountFromBalance: BigNumberish,
      externalFunds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFunds(tokenContract: string, overrides?: CallOverrides): Promise<void>;

    claimNft(
      auctionId: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createAuction(
      nftContract: string,
      id: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      reservePrice: BigNumberish,
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionDetails(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IAuction.AuctionStructOutput>;

    getAuctionStatus(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBidDetails(
      auctionId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<IAuction.BidStructOutput>;

    getClaimableBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHighestBidder(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resolveAuction(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionCancelled(uint256)"(
      auctionId?: BigNumberish | null
    ): AuctionCancelledEventFilter;
    AuctionCancelled(
      auctionId?: BigNumberish | null
    ): AuctionCancelledEventFilter;

    "BalanceUpdated(address,address,uint256)"(
      accountOf?: string | null,
      tokenAddress?: string | null,
      newBalance?: BigNumberish | null
    ): BalanceUpdatedEventFilter;
    BalanceUpdated(
      accountOf?: string | null,
      tokenAddress?: string | null,
      newBalance?: BigNumberish | null
    ): BalanceUpdatedEventFilter;

    "BidPlaced(uint256,uint256)"(
      auctionId?: null,
      amount?: null
    ): BidPlacedEventFilter;
    BidPlaced(auctionId?: null, amount?: null): BidPlacedEventFilter;

    "ClaimNFT(uint256,address,address,uint256)"(
      auctionId?: null,
      winner?: null,
      recipient?: null,
      amount?: null
    ): ClaimNFTEventFilter;
    ClaimNFT(
      auctionId?: null,
      winner?: null,
      recipient?: null,
      amount?: null
    ): ClaimNFTEventFilter;

    "NewAuction(uint256,tuple)"(
      auctionId?: BigNumberish | null,
      newAuction?: null
    ): NewAuctionEventFilter;
    NewAuction(
      auctionId?: BigNumberish | null,
      newAuction?: null
    ): NewAuctionEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    bid(
      auctionId: BigNumberish,
      amountFromBalance: BigNumberish,
      externalFunds: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFunds(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimNft(
      auctionId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAuction(
      nftContract: string,
      id: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      reservePrice: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuctionDetails(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionStatus(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBidDetails(
      auctionId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHighestBidder(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resolveAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bid(
      auctionId: BigNumberish,
      amountFromBalance: BigNumberish,
      externalFunds: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFunds(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimNft(
      auctionId: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAuction(
      nftContract: string,
      id: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      reservePrice: BigNumberish,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionDetails(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionStatus(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBidDetails(
      auctionId: BigNumberish,
      bidder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableBalance(
      account: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHighestBidder(
      auctionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resolveAuction(
      auctionId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
